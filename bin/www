#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('semp:server');
// var http = require('http');
const express = require("express");
// const app = express();
const bodyParser = require("body-parser");
// const chatRouter = require("../routes/chatroute");
const http = require("http").Server(app);

// require the socket.io module
const io = require("socket.io");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

// var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

http.listen(port, "127.0.0.1");
// http.listen(port);
http.on('error', onError);
http.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}



//bodyparser middleware
app.use(bodyParser.json());

//routes
// app.use("/Chats", chatRouter);

//set the express.static middleware
app.use(express.static(__dirname + "/public"));

//integrating socketio
socket = io(http);

//database connection
const Chat = require("../models/Chat");
// const connect = require("./dbconnect");

//setup event listener
// socket.on("connection", socket => {
//   // console.log("user connected");

//   // socket.on("disconnect", function() {
//   //   console.log("user disconnected");
//   // });

//   //Someone is typing
//   socket.on("typing", data => {
//     socket.broadcast.emit("notifyTyping", {
//       user: data.user,
//       message: data.message
//     });
//   });

//   //when soemone stops typing
//   socket.on("stopTyping", () => {
//     socket.broadcast.emit("notifyStopTyping");
//   });

//   socket.on("chat message", function(msg) {
//     //console.log("message: " + msg);

//     //broadcast message to everyone in port:3000 except yourself.
//     socket.broadcast.emit("received", { message: msg });

//     // //save chat to the database
//     // connect.then(db => {
//     //   console.log("connected correctly to the server");
//     //   let chatMessage = new Chat({ message: msg, sender: "Anonymous" });

//     //   chatMessage.save();
//     // });
//   });
// });

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = http.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


